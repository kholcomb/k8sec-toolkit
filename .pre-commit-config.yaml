# Pre-commit configuration for k8sec-toolkit
# See https://pre-commit.com for more information
repos:
  # Go language hooks
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
        name: Format Go code
        description: Runs gofmt to format Go code
      - id: go-imports
        name: Organize Go imports
        description: Runs goimports to organize imports and format code
      - id: go-mod-tidy
        name: Clean go.mod and go.sum
        description: Runs go mod tidy to clean up module files
      - id: go-vet-mod
        name: Run go vet
        description: Static analysis of Go code
      - id: go-unit-tests-mod
        name: Run Go unit tests
        description: Runs go test ./... to execute unit tests
        pass_filenames: false
      - id: golangci-lint-mod
        name: Run golangci-lint
        description: Comprehensive Go linter

  # Security hooks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        description: Prevents committing secrets and credentials
        args: ['--baseline', '.secrets.baseline']
        exclude: go.sum

  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.0
    hooks:
      - id: gitleaks
        name: GitLeaks secret detection
        description: Additional secret detection with GitLeaks

  # General quality hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Remove trailing whitespace
        description: Removes trailing whitespace from files
      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensures files end with a newline
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Detects merge conflict markers
      - id: check-added-large-files
        name: Check for large files
        description: Prevents large files (>500KB) from being committed
        args: ['--maxkb=500']
      - id: mixed-line-ending
        name: Fix mixed line endings
        description: Normalizes line endings to LF
        args: ['--fix=lf']
      - id: check-yaml
        name: Validate YAML syntax
        description: Checks YAML files for syntax errors
        files: \.(yaml|yml)$
      - id: check-json
        name: Validate JSON syntax
        description: Checks JSON files for syntax errors
        files: \.json$
      - id: check-toml
        name: Validate TOML syntax
        description: Checks TOML files for syntax errors
        files: \.toml$
      - id: check-xml
        name: Validate XML syntax
        description: Checks XML files for syntax errors
        files: \.xml$
      - id: check-case-conflict
        name: Check for case conflicts
        description: Ensures case-insensitive filesystems work
      - id: check-docstring-first
        name: Check docstring placement
        description: Ensures docstrings are first in Python files
        files: \.py$
      - id: check-executables-have-shebangs
        name: Check executable shebangs
        description: Ensures executable files have shebangs
      - id: check-shebang-scripts-are-executable
        name: Check shebang executability
        description: Ensures files with shebangs are executable

  # Docker hooks
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfile
        description: Lints Dockerfile for best practices
        files: Dockerfile.*

  # Markdown hooks
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        name: Lint Markdown
        description: Lints Markdown files for consistency
        args: ['--fix']
        files: \.md$

  # Shell script hooks
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Check shell scripts
        description: Lints shell scripts with ShellCheck
        files: \.(sh|bash)$

  # Custom project-specific hooks
  - repo: local
    hooks:
      - id: check-k8sec-toolkit-references
        name: Validate k8sec-toolkit references
        description: Ensures no old "kubesec" references remain
        entry: bash -c 'if grep -r "kubesec" --exclude-dir=.git --exclude="*.md" --exclude=".pre-commit-config.yaml" .; then echo "Found kubesec references that should be k8sec-toolkit"; exit 1; fi'
        language: system
        pass_filenames: false
        
      - id: check-go-module-path
        name: Validate Go module path
        description: Ensures go.mod uses correct module path
        entry: bash -c 'if ! grep -q "module github.com/kholcomb/k8sec-toolkit" go.mod; then echo "go.mod must use correct module path"; exit 1; fi'
        language: system
        files: go.mod
        
      - id: check-binary-name-consistency
        name: Check binary name consistency
        description: Ensures Makefile and configs use k8sec-toolkit binary name
        entry: bash -c 'if grep -r "BINARY_NAME.*kubesec" Makefile; then echo "Found incorrect binary name in Makefile"; exit 1; fi'
        language: system
        files: Makefile
        
      - id: validate-github-actions
        name: Validate GitHub Actions
        description: Basic validation of GitHub Actions workflow syntax
        entry: bash -c 'find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c "echo Validating {}; yamllint {}"'
        language: system
        files: \.github/workflows/.*\.(yml|yaml)$
        additional_dependencies: [yamllint]

# Global configuration
default_stages: [commit, push]
fail_fast: false